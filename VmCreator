#!/bin/env groovy
package com.owteam.bearware.vmcreatetest;

@Grab(group='com.vmware', module='vijava', version='5.1')
@Grab(group='com.owteam.engUtils', module='netrc', version='2.0.0' )
@Grab(group='commons-net', module='commons-net', version='3.3')

import java.net.URL;
import com.vmware.vim25.*;
import com.vmware.vim25.mo.*;
import com.vmware.vim25.mo.util.*;
import java.net.MalformedURLException;
import java.rmi.RemoteException;
import java.text.SimpleDateFormat;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.net.Inet4Address;
import com.owteam.engUtils.netrc.Netrc;
import groovy.json.*
import groovy.util.ConfigObject;
import org.apache.commons.net.util.*;

/**
 * Test class for creating VMs, missing lots of logic and automation.
 *
 */
public class VmCreator {


	ServiceInstance si;
	ServerConnection sc;

	def config = new ConfigObject();
	Datacenter dc;
	VirtualMachine templateVM;



//Unused unless we want to create new vm in a different location from template
	VirtualMachineRelocateSpec createRelocationSpec() throws RuntimeFault, RemoteException {
		VirtualMachineRelocateSpec vmRelocationSpec = new VirtualMachineRelocateSpec();

		HostSystem hostSystem = (HostSystem) new InventoryNavigator(dc).searchManagedEntity("HostSystem", config.preferedHost);
		if (hostSystem == null) {
			Logger.getLogger(VmCreator.class.getName()).log(Level.SEVERE, "Can't find host: " + config.preferedHost);
			throw new RuntimeException("Can't find host: " + config.preferedHost + " in datacenter: " + dc.getName());
		}
		ComputeResource computeResource = (ComputeResource) new InventoryNavigator(dc).searchManagedEntity("ComputeResource", config.preferedComputeResource);
		if (computeResource == null) {
			Logger.getLogger(VmCreator.class.getName()).log(Level.SEVERE, "Can't find ComputeResource: $config.preferedComputeResource");
			throw new RuntimeException("Can't find ComputeResource: $config.preferedComputeResource in datacenter: " + dc.getName());
		}

		ResourcePool resourcePool = (ResourcePool) new InventoryNavigator(computeResource).searchManagedEntity("ResourcePool", config.preferedResourcePool);
		if (resourcePool == null) {
			Logger.getLogger(VmCreator.class.getName()).log(Level.SEVERE, "Can't find pool: $config.preferedResourcePool");
			throw new RuntimeException("Can't find pool: $config.preferedResourcePool in datacenter: " + dc.getName());
		}

		vmRelocationSpec.host = hostSystem.getMOR();
		vmRelocationSpec.pool = resourcePool.getMOR();

		return vmRelocationSpec;

	}

	CustomizationSpec createCustomizationSpec() {
		CustomizationSpec customizationSpec = new CustomizationSpec();

		customizationSpec.options = new CustomizationLinuxOptions();

		CustomizationLinuxPrep identity18 = new CustomizationLinuxPrep();
		identity18.domain = config.vmDomain;
		identity18.timeZone = config.vmTimeZone;
		identity18.hwClockUTC = config.vmHWClockUTC;
		identity18.hostName = new CustomizationVirtualMachineName();
		customizationSpec.identity = identity18;

		CustomizationGlobalIPSettings globalIPSettings20 = new CustomizationGlobalIPSettings();
		globalIPSettings20.dnsSuffixList = config.vmDnsSuffixList;
		globalIPSettings20.dnsServerList = config.vmDnsServerList;
		customizationSpec.globalIPSettings = config.globalIPSettings20;

		CustomizationAdapterMapping[] nicSettingMaps21 = new CustomizationAdapterMapping[config.adapterMappings.size()];
		for (int i = 0; i < config.adapterMappings.size(); i++) {
			nicSettingMaps21[i] = createAdapterMapping(config.adapterMappings[i][0], config.adapterMappings[i][1], config.adapterMappings[i][2]);
		}
		customizationSpec.nicSettingMap = nicSettingMaps21;

		return customizationSpec;
	}

	CustomizationAdapterMapping createAdapterMapping(String ip, String subnet, String gateway) {
		CustomizationAdapterMapping nicSettings = new CustomizationAdapterMapping();
		CustomizationIPSettings adapter23 = new CustomizationIPSettings();
		CustomizationFixedIp ip24 = new CustomizationFixedIp();
		nicSettings.adapter = adapter23;

		adapter23.ip = ip24;
		ip24.ipAddress = ip;
		adapter23.subnetMask = subnet;
		adapter23.gateway = [gateway,];
		adapter23.primaryWINS = "";
		adapter23.secondaryWINS = "";
		return nicSettings;
	}

	VirtualMachineCloneSpec createCloneSpec() throws RemoteException {
		VirtualMachineCloneSpec vmCloneSpec = new VirtualMachineCloneSpec();
		vmCloneSpec.template = false;
		vmCloneSpec.setLocation(createRelocationSpec());
		//vmCloneSpec.setLocation(new VirtualMachineRelocateSpec());

		VirtualMachineConfigSpec vmConfigSpec = new VirtualMachineConfigSpec();
		vmConfigSpec.name = config.instanceName;
		vmConfigSpec.memoryMB = config.memoryMB;
		vmConfigSpec.numCPUs = config.numCPU;
		vmCloneSpec.config = config.vmConfigSpec;
		vmCloneSpec.customization = createCustomizationSpec();

		vmCloneSpec.powerOn = true;
		//Below code creates an pruned json representation of the config but I think a different serializer/deserializer would be needed to make import/export capable configs.
		def denullSpec = denull(new JsonSlurper().parseText((new JsonBuilder(vmCloneSpec).toPrettyString())));
		File specFile = File.createTempFile(config.instanceName,"json");
		specFile.write(new JsonBuilder(denullSpec).toPrettyString());
		return vmCloneSpec;
	}
	Object denull(obj) {
  		if(obj instanceof Map) {
    			obj.collectEntries {k, v ->
      				if(v) [(k): denull(v)] else [:]
    			}
  		} else if(obj instanceof List) {
    			obj.collect { denull(it) }.findAll { it != null }
  		} else {
    			obj
  		}
	}
	void validateOptions(){
	}
	void validateOptionsStrings(){
		//array of Strings
		[
		'instanceName',
		'dcName',
		'templateName',
		'destFolderName',
		'preferedHost',
		'preferedComputeResource',
		'preferedResourcePool',
		'vmDomain',
		'vmTimeZone' ].each{
			if(config.containsKey(it)){
				if(config[it] instanceOf String){
					if(config[it].matches('.*\\w.*'){
						retrun;
					}else{
						throw new IllegalArgumentException("Configuration for $it does not conatain any word characters: '${config[it]}'");
					}
				}else{
					throw new IllegalArgumentException("Configuration for $it should be a String but appears to be something else: '${config[it]}'");
				}
			}else{
				throw new IllegalArgumentException("Configuration for $it is required but not present");
			}
		}
	}
	void validateOptionsLongs(){
		//long
		['memoryMB'].each{
			if(config.containsKey(it)){
				if(config[it] instanceOf String){
					if(config[it].matches('.*\\w.*'){
						retrun;
					}else{
						throw new IllegalArgumentException("Configuration for $it does not conatain any word characters: '${config[it]}'");
					}
				}else{
					throw new IllegalArgumentException("Configuration for $it should be a String but appears to be something else: '${config[it]}'");
				}
			}else{
				throw new IllegalArgumentException("Configuration for $it is required but not present");
			}
		}
	}
	void validateOptionsIntegers(){
		//int
		['numCPU'].each{
			if(config.containsKey(it)){
				if(config[it] instanceOf String){
					if(config[it].matches('.*\\w.*'){
						retrun;
					}else{
						throw new IllegalArgumentException("Configuration for $it does not conatain any word characters: '${config[it]}'");
					}
				}else{
					throw new IllegalArgumentException("Configuration for $it should be a String but appears to be something else: '${config[it]}'");
				}
			}else{
				throw new IllegalArgumentException("Configuration for $it is required but not present");
			}
		}
	}
	void validateOptionsBooleans(){
		//boolean
		['vmHWClockUTC'].each{
			if(config.containsKey(it)){
				if(config[it] instanceOf String){
					if(config[it].matches('.*\\w.*'){
						retrun;
					}else{
						throw new IllegalArgumentException("Configuration for $it does not conatain any word characters: '${config[it]}'");
					}
				}else{
					throw new IllegalArgumentException("Configuration for $it should be a String but appears to be something else: '${config[it]}'");
				}
			}else{
				throw new IllegalArgumentException("Configuration for $it is required but not present");
			}
		}
	}
	void validateOptionsArraysOfStrings(){
		//array of Strings
		['vmDnsSuffixList',
		'vmDnsServerList'].each{
			if(config.containsKey(it)){
				if(config[it] instanceOf String){
					if(config[it].matches('.*\\w.*'){
						retrun;
					}else{
						throw new IllegalArgumentException("Configuration for $it does not conatain any word characters: '${config[it]}'");
					}
				}else{
					throw new IllegalArgumentException("Configuration for $it should be a String but appears to be something else: '${config[it]}'");
				}
			}else{
				throw new IllegalArgumentException("Configuration for $it is required but not present");
			}
		}
	}
	void validateOptionsAdapterMapprings(){
		//array of array of Strings
		['adapterMappings '].each{
			if(config.containsKey(it)){
				if(config[it] instanceOf String){
					if(config[it].matches('.*\\w.*'){
						retrun;
					}else{
						throw new IllegalArgumentException("Configuration for $it does not conatain any word characters: '${config[it]}'");
					}
				}else{
					throw new IllegalArgumentException("Configuration for $it should be a String but appears to be something else: '${config[it]}'");
				}
			}else{
				throw new IllegalArgumentException("Configuration for $it is required but not present");
			}
		}
	}


	void createVM() {
		try {

			si = new ServiceInstance(new URL(siURL), siUser, siPass, true);
			sc = si.getServerConnection();

			dc = (Datacenter) new InventoryNavigator(si.getRootFolder()).searchManagedEntity("Datacenter", config.dcName);
			if (dc == null) {
				Logger.getLogger(VmCreator.class.getName()).log(Level.SEVERE, "Can't find datacenter: " + config.dcName);
				System.exit(1);
			}

			templateVM = (VirtualMachine) new InventoryNavigator(dc).searchManagedEntity("VirtualMachine", config.templateName);
			if (templateVM == null) {
				Logger.getLogger(VmCreator.class.getName()).log(Level.SEVERE, "Can't find template: " + config.templateName);
				System.exit(1);
			}

			Folder cloneDestinationFolder = (Folder) new InventoryNavigator(dc).searchManagedEntity("Folder", config.destFolderName);
			if (cloneDestinationFolder == null) {
				Logger.getLogger(VmCreator.class.getName()).log(Level.SEVERE, "Can't find Folder: " + config.destFolderName);
				System.exit(1);
			}

			Task cloneTask = templateVM.cloneVM_Task(cloneDestinationFolder, config.instanceName, createCloneSpec());
			//Task cloneTask = templateVM.cloneVM_Task((Folder)templateVM.getParent(), instanceName, createCloneSpec());

			while (cloneTask.getTaskInfo().getState().equals(TaskInfoState.running)) {
				Thread.sleep(2000);
				System.out.println("Percentage complete: " + cloneTask.getTaskInfo().progress);
			}
			if (cloneTask.getTaskInfo().getState().equals(TaskInfoState.success)) {

			}
			String completionTime = (new SimpleDateFormat()).format(cloneTask.getTaskInfo().completeTime.getTime());
			System.out.println("Creation finished at " + completionTime + " with state " + cloneTask.getTaskInfo().state.toString());
			if(cloneTask.getTaskInfo().state.toString()=="error"){
				System.err.println("ErrorMessage: ${cloneTask.getTaskInfo().error.getLocalizedMessage()} ");
				System.err.println("Reason type: ${cloneTask.getTaskInfo().reason.getDynamicType()} ");
				cloneTask.getTaskInfo().reason.getDynamicProperty().each{
					System.err.println("Reason property name: ${it.name} \tvalue: ${it.val}");
				}
				System.exit(2);
			}

			si.getServerConnection().logout();

		} catch (MalformedURLException ex) {
			Logger.getLogger(VmCreator.class
				.getName()).log(Level.SEVERE, "Invalid URL", ex);
			System.exit(1);
		} catch (RemoteException ex) {
			Logger.getLogger(VmCreator.class
				.getName()).log(Level.SEVERE, "Error talking to server", ex);
			System.exit(2);
		} catch (InterruptedException ex) {
			Logger.getLogger(VmCreator.class
				.getName()).log(Level.SEVERE, "Recieved interrupt.", ex);
			System.exit(3);
		} finally {

		}
	}

	public static void main(String[] args) {
 		def cli = new CliBuilder(usage:'VmCreator [options] hostname')
 		cli.m(longOpt:'mem', args:1, argName:'mem', 'amount of memory in MB')
 		cli.c(longOpt:'cpu', args:1, argName:'cpu', 'number of cpus')
 		cli.h(longOpt:'hostname', args:1, required:1,argName:'hostname', 'name of server to create (must exist in dns)')
 		cli.f(longOpt:'configfile', args:1, required:0,argName:'configfile', 'name of file to read in configuration properties from')
 		cli.u(longOpt:'configurl', args:1, required:0,argName:'configurl', 'name of file to read in configuration properties from')
 		cli.e(longOpt:'environment', args:1, required:0,argName:'environment', 'name of enviroment to read in configuration properties from')
		def options = cli.parse(args)

		//if(args.length!=1){
		if(!options){
			//System.out.println(cli.usage());
			System.exit(2);
		}

                String vcenterHost="vcenter.fqdn";
                URL vcenterURL=new URL("https://${vcenterHost}/sdk/");
                def creds = Netrc.getInstance().getCredentials(vcenterHost);
                if(creds == null){
                        System.err.println("No credentials found, please add a .netrc entry for phx-vcenter01.wineng.owteam.com");
                        System.exit(1);
                }
		String name = options.hostname;
		long mem;
		int cpu;
		String vmIP;
		try{
			InetAddress boxAddr = InetAddress.getByName(name);
			vmIP = boxAddr.getHostAddress();
			if(! vmIP ==~ /"^10.85.*"/){
				Logger.getLogger(VmCreator.class.getName()).log(Level.SEVERE, name+" doesn't resolve to a 10.85 address, please fix or go to hell");
				System.exit(1);
			}
			Logger.getLogger(VmCreator.class.getName()).log(Level.INFO, "confirming ip not used");
			if(boxAddr.isReachable(3000)){
				Logger.getLogger(VmCreator.class.getName()).log(Level.SEVERE, name+" is pingable, please pick something else");
				System.exit(1);
			}
		}catch(Exception e){
				Logger.getLogger(VmCreator.class.getName()).log(Level.SEVERE, "Error attempting to resolve name");
				System.exit(1);
		}
		
		String vmStorageIP = vmIP.replaceFirst("^10[.]85","10.22");
		File userprefs=new File("${System.getProperty('user.home')}${System.getProperty('file.separator')}.VmCreator.conf");
		VmCreator vmc = new VmCreator(options.hostname, vmIP, vmStorageIP);
		vmc.config.instanceName = options.hostname;
		if(options.environment){
			if(userprefs.exists())vmc.config.merge(new ConfigSlurper(options.environment).parse(userprefs.toURL()));
			if(options.configurl)vmc.config.merge(new ConfigSlurper(options.environment).parse(new URL(options.configurl)));
			if(options.configfile)vmc.config.merge(new ConfigSlurper(options.environment).parse(new File(options.configfile).toURL()));
		}else{
			if(userprefs.exists())vmc.config.merge(new ConfigSlurper().parse(userprefs.toURL()));
			if(options.configurl)vmc.config.merge(new ConfigSlurper().parse(new URL(options.configurl)));
			if(options.configfile)vmc.config.merge(new ConfigSlurper().parse(new File(options.configfile).toURL()));
		}
		if(options.mem)vmc.config.memoryMB = Long.parseLong(options.mem);
		if(options.cpu)vmc.config.numCPU = Integer.parseInt(options.cpu);
		vmc.siURL=vcenterURL;
		vmc.siUser=creds.getUserName();
		vmc.siPass=creds.getPassword();
		vmc.createVM();
	}
}
